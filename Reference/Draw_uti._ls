(prompt "\n\nL O A D I N G    D R A W _ U T I . L S P")

(defun ETOS (arg / file)
  (if (= 'STR (type arg)) (setq arg (strcat "\"" arg "\"")))
  (setq file (open "TL" "w"))
  (princ arg file)
  (close file)
  (setq file (open "TL" "r"))
  (setq arg (read-line file))
  (close file)
  (close (open "TL" "w"))
  arg
)  
;------------------------------------------------------------------
(defun fopen ( fname mode msg / fh )
  (setq fh (open fname mode))
  (defun *error* (msg)
     (princ msg)
     (princ)
  )
  (while (= fh nil)
    (progn
       (Prompt (strcat "\nFile " msg " Not Found !"))
       (setq fname (USTR 1 (strcat "\nInput " msg " Again  ") nil T)
             fh (open fname mode)
       ) 
    )
  )
  fh
)
;------------------------------------------------------------------
(defun UDIST (bit kwd msg def bpt / inp)
  (if def
    (setq msg (strcat "\n" msg "<" (rtos def) ">: ")
          bit (* 2 (fix (/ bit 2)))
    )
    (if (= " " (substr msg (strlen msg) 1)) 
      (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) ": "))
      (setq msg (strcat "\n" msg ": "))
    )
  )
  (initget bit kwd)
  (setq inp
    (if bpt
      (getdist msg bpt)
      (getdist msg)
    )
  )
  (if inp inp def)
)	
;------------------------------------------------------------------
(defun UKWORD (bit kwd msg def / inp)
  (if (and def (/= def ""))
    (setq msg (strcat "\n" msg "<" def ">: ")
          bit (* 2 (fix (/ bit 2)))
    )
    (if (= " " (substr msg (strlen msg) 1))
      (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) ": "))
      (setq msg (strcat "\n" msg ": "))
    )
  )
  (initget bit kwd)
  (setq inp (getkword msg))
  (if inp inp def)
)
;------------------------------------------------------------------
(defun USTR (bit msg def spflag / inp nval)
  (if (and def (/= def ""))
    (setq msg (strcat "\n" msg "<" def ">: ")
          inp (getstring spflag msg)
          inp (if (= inp "") def inp)
    )
    (progn
      (if (= " " (substr msg (strlen msg) 1))
        (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) ": "))
        (setq msg (strcat "\n" msg ": "))
      )
      (if (= bit 1)
        (while (= "" (setq inp (getstring spflag msg)))
           (prompt "\nInvalid String.")
        )
        (setq inp (getstring spflag msg))
      )
    )
  )
  inp
)
;------------------------------------------------------------------
(defun UINT (bit kwd msg def / inp)
  (if def
    (setq msg (strcat "\n" msg "<" (itoa def) ">: ")
	  bit (* 2 (fix (/ bit 2)))
    )
    (if (= " " (substr msg (strlen msg) 1)) 
      (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) ": "))
      (setq msg (strcat "\n" msg ": "))
    )
  )
  (initget bit kwd)
  (setq inp (getint msg))
  (if inp inp def)
)	
;------------------------------------------------------------------
(defun UREAL (bit kwd msg def / inp)
  (if def
    (setq msg (strcat "\n" msg "<" (rtos def 2) ">: ")
	  bit (* 2 (fix (/ bit 2)))
    )
    (if (= " " (substr msg (strlen msg) 1)) 
      (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) ": "))
      (setq msg (strcat "\n" msg ": "))
    )
  )
  (initget bit kwd)
  (setq inp (getreal msg))
  (if inp inp def)
)	
;------------------------------------------------------------------
(defun UPOINT (bit kwd msg def bpt / inp)
  (if def
    (setq pts (strcat 
                 (rtos (car def)) "," (rtos (cadr def))
                 (if
                   (and (caddr def) (= 0 (getvar "FLATLAND")))
                   (strcat "," (rtos (caddr def))) 
                   ""
                 )
               )
          msg (strcat "\n" msg "<" pts ">: ")
          bit (* 2 (fix (/ bit 2)))
    ) 
    (if (= " " (substr msg (strlen msg) 1))
       (setq msg (strcat "\n" (substr msg 1 (1- (strlen msg))) " : "))
       (setq msg (strcat "\n" msg ": "))
    )
  )
  (initget bit kwd)
  (setq inp
    (if bpt
      (getpoint msg bpt)
      (getpoint msg)
    )
  )
  (if inp inp def)
) 
;------------------------------------------------------------------
(defun CMDECH (mode)
  (if (= mode 1)
    (setvar "CMDECHO" 0)
    (setvar "CMDECHO" 1) 
  )
  (graphscr)
  (princ)
)


;------------------------------------------------------------------
(prompt "\n   CUT : Draw expansion symbol")
(defun c:CUT( / pt1 pt2 pt3 pt4 pt5 pt6 x1 x2 y1 y2 dx dy xx1 yy1 
                xx2 yy2 xx3 yy3 xx4 yy4 a b)
  (prompt "\nExpansion symbol.")
  (CMDECH 1)
  (setq #dist (* scale 4))
  (setq pt1 (getpoint "\nSpecify first point : ")
  	pt2 (getpoint "\nSpecify second point : " pt1)
  	#dist (abs (UDIST 0 "" "How big ? " #dist nil))
  	x1 (car pt1)
        y1 (cadr pt1)
	x2 (car pt2)
	y2 (cadr pt2)
        a (angle pt1 pt2)
        b (- (/ PI 2) a)
	dx (* (/ #dist 3) (cos a))
	dy (if (= (cos a) 0) (/ #dist 3) (* dx (/ (sin a) (cos a))))
        xx1 (- (/ (+ x2 x1) 2) (/ dx 2))
	yy1 (- (/ (+ y2 y1) 2) (/ dy 2))
	xx2 (+ (/ (+ x2 x1) 2) (/ dx 2))
	yy2 (+ (/ (+ y2 y1) 2) (/ dy 2))
	dx  (* (/ #dist 2) (cos b))
	dy  (* (/ #dist 2) (sin b))
	xx3 (- (/ (+ x2 x1) 2) dx)
	yy3 (+ (/ (+ y2 y1) 2) dy)
	xx4 (+ (/ (+ x2 x1) 2) dx)
	yy4 (- (/ (+ y2 y1) 2) dy)
	pt3 (list xx1 yy1)
	pt4 (list xx3 yy3)
	pt5 (list xx4 yy4)
	pt6 (list xx2 yy2)
  )
  (setq #OSMODE (getvar "OSMODE"))
  (setvar "OSMODE" 0)
  (command "PLINE" pt1 pt3 pt4 pt5 pt6 pt2 "")
  (setvar "OSMODE" #OSMODE)
);defun c:CUT


;------------------------------------------------------------------
(prompt "\n   DB  : Drawing bar, weld")
(defun c:DB( / a pt1 pt2 pt3 pt4 x1 y1 times dist dl dx dy pt)
(command "_undo" "e" "_undo" "be")
(prompt "\nDrawing bar, weld.")
(cmdech 1)
(if #dia dia (setq #dia 20))
(if #inter #inter (setq #inter 200))
(if #kind #kind (setq #kind "Bar"))
(setq #kind (ukword 1 "Bar Siteweld Factoryweld" " Bar, weld in Site, weld in Factory " #kind)
      pt1 (getpoint "\nFrom...")
      pt2 (getpoint "\nTo..." pt1)
      #dia (abs (UDIST 0 "" "How big :" #dia nil))
      #inter (abs (UDIST 0 "" "Interval :" #inter nil))
      x1 (car pt1)
      y1 (cadr pt1)
      a (angle pt1 pt2)
      dist (distance pt1 pt2)
      times (fix (/ dist #inter))
      dl (/ dist times)
      dx (* dl (cos a))
      dy (* dl (sin a))
)
(setq #OSMODE (getvar "OSMODE"))
(setvar "OSMODE" 0)
(while (>= times 0)
  (setq x (+ x1 (* times dx))
      y (+ y1 (* times dy))
      pt (list x y))
  (if (= #kind "Bar")
     (command "DONUT" 0 #dia pt ""))
  (if (= #kind "Factoryweld")
     (command "LINE" pt (polar pt (+ a (/ PI 2)) #dia) ""))
  (if (= #kind "Siteweld")
     (progn
        (setq pt1 (polar pt (+ a PI) (/ #dia 2))
              pt2 (polar pt a (/ #dia 2))
              pt3 (polar pt1 (+ a (/ PI 4)) (* 1.414 #dia))
              pt4 (polar pt2 (+ a (/ (* 3 PI) 4)) (* 1.414 #dia))
        )      
        (command "LINE" pt1 pt3 "")
        (command "LINE" pt2 pt4 "")
     )
  )
  (setq times (1- times))
)
(setvar "OSMODE" #OSMODE)
(command "_undo" "e")
(princ)
)


;------------------------------------------------------------------
(prompt "\n   ST1 : Bar sections ")
(defun c:st1( / a count pt1 pt2 x1 y1 dist dl dx dy pt)
(command "_undo" "e" "_undo" "be")
(prompt "\nBar sections. ")
(cmdech 1)
(if #dia dia (setq #dia 20))
(if #times #Hmany (setq #times 2))
(setq pt1 (getpoint "\nFrom...")
      pt2 (getpoint "\nTo..." pt1)
      #dia (abs (UDIST 0 "" "Diameter of bar :" #dia nil))
      #times (UINT 4 "" "How many bars :" #times)
      x1 (car pt1)
      y1 (cadr pt1)
      a (angle pt1 pt2)
      dist (distance pt1 pt2)
      dl (/ dist (- #times 1))
      dx (* dl (cos a))
      dy (* dl (sin a))
      count (- #times 1)
)
(setq #OSMODE (getvar "OSMODE"))
(setvar "OSMODE" 0)
(while (>= count 0)
  (setq x (+ x1 (* count dx))
      y (+ y1 (* count dy))
      pt (list x y)
  )
  (command "DONUT" 0 #dia pt "")
  (setq count (- count 1))
)
(setvar "OSMODE" #OSMODE)
(command "_undo" "e")
(princ)
)

;------------------------------------------------------------------
(prompt "\n   CW  : Change the width of Lines and Polylines")
(DEFUN C:CW( / ss1 emax count et ed en)
  (command "_undo" "e" "_undo" "be")
  (PROMPT "\nCHANGE WIDTH ! ")
  (PROMPT " \nSelect all Entities wanted to change... ")
  (IF #width #width (setq #width 0.5))
  (cmdech 1)
  (SETQ ss1 (ssget)
      emax (sslength ss1)
      count 0
      #width (UREAL 4 "" "Enter new width for all entities " #width)
  )
  (WHILE (< count emax)
    (setq en (ssname ss1 count)
        ed (entget en)
        et (cdr (assoc 0 ed))
    )
    (if (= et "LINE") (COMMAND "PEDIT" en "Y" "W" #width ""))
    (if (= et "PLINE") (COMMAND "PEDIT" en "W" #width ""))
    (setq count (1+ count))
  )
  (command "_undo" "e")
  (princ)
)


;------------------------------------------------------------------
(prompt "\n   HK  : Draw a hook ")
(DEFUN C:HK( / pt1 pt2 pt3 pt4 da ang1 ang2 sidepoint)
  (PROMPT "\nDraw a hook. ")
  (cmdech 1)
  (if #diaa #diaa (setq #diaa 25))
  (setq pt1 (getpoint "\nBegin from :")
        pt2 (getpoint "\nDirection..." pt1)
        sidepoint (getpoint "\nSelect side ..." pt1)
        #diaa (abs (UDIST 0 "" "Enter diameter of hook :" #diaa pt1))
        ang1 (angle pt1 pt2)
        da (angle pt1 sidepoint) 
  )
  (setq #OSMODE (getvar "OSMODE"))
  (setvar "OSMODE" 0)
  (if (and (<= ang1 4.71239) (>= ang1 1.5708))
        (if (> da ang1)
           (setq ang2 (+ ang1 (/ PI 2)))
           (setq ang2 (- ang1 (/ PI 2)))
        )
  )
  (if (and (<= ang1 1.5708) (>= ang1 0))
         (if (or (> da 4.71239) (< da ang1))
             (setq ang2 (- ang1 (/ PI 2)))
             (setq ang2 (+ ang1 (/ PI 2)))
         )
   )
   (if (and (<= ang1 6.2832) (>= ang1 4.71239))
         (if (or (<= da 1.5708) (>= da ang1))
            (setq ang2 (+ ang1 (/ PI 2)))
            (setq ang2 (- ang1 (/ PI 2)))
         ) 
   )
  (setq pt3 (polar pt1 ang2 #diaa)
        pt4 (polar pt3 (+ ang1 PI) (* 1.5 #diaa))
  )
  (command "PLINE" pt1 "A" "D" pt2 pt3 "L" pt4 "")
  (setvar "OSMODE" #OSMODE)
) 

;------------------------------------------------------------------
(defun NS (x1 y1 x2 y2 x)
  (+ y1 (* (- x x1) (/ (float (- y1 y2)) (float (- x1 x2)))))
)


;------------------------------------------------------------------
(prompt "\n   CODE: Code steels in a section")
(defun c:code( / ptlist pt a b n len pt1 ptc so pt2 count ptg)
  (command "_undo" "e" "_undo" "be")
  (if (= SCALE nil) (setq SCALE (UREAL 4 "" "Scale " SCALE)))
  (setq pt (upoint 0 "" "\nPick steel position" nil nil))
  (while (/= pt nil)
     (setq ptlist (append ptlist (list pt))
           pt (upoint 0 "" "\nPick steel position" nil pt)
     )
  )
  (setq pt1 (upoint 0 "" "\nFrom..." nil (nth 0 ptlist))
        pt2 (upoint 0 "" "\nTo..." nil pt1)
        len (distance (nth 0 ptlist) pt1)
        a (angle (nth 0 ptlist) pt1)
        b (angle pt1 pt2)
        n (length ptlist)
        ptc (polar pt2 b (* SCALE 2.25))
        count 0
  )
  (setq #OSMODE (getvar "OSMODE"))
  (setvar "OSMODE" 0)
  (while (< count n)
     (progn
        (setq pt (polar (nth count ptlist) a len)
              ptg (inters pt1 pt2 (nth count ptlist) pt seg)
        )  
        (command "LINE" (nth count ptlist) ptg "")
        (setq count (+ 1 count))
     )
  )
  (command "LINE" pt1 pt2 "")
  (if #dk #dk (setq #dk "00"))
  (setq str (strcat (rtos n 2 0) "%%c" (ustr 0 "Diameter " #dk T) " "))
  (setq so (ustr 0 "Number " "00" T))
  (if (>= (car pt2) (car pt1))
    (progn
     (command "TEXT" "J" "BR" pt2 (DEG b) str)
     (command "TEXT" "J" "M" ptc (DEG b) so)
    )
    (progn 
     (command "TEXT" "J" "BL" pt2 (DEG (angle pt2 pt1)) str)
     (command "TEXT" "J" "M" ptc (DEG (angle pt2 pt1)) so)
    )
  )
  (command "CIRCLE" ptc "D" (* 4.5 SCALE))
  (setvar "OSMODE" #OSMODE)
  (command "_undo" "e")
  (princ)
);defun c:code



;------------------------------------------------------------------
(prompt "\n   SHA : Draw shadow")
(defun c:SHA (/ Check Line1 Line2 Pt11 Pt12 Pt21 Pt22 HsoKC NumLine Pt1 Pt2 Tong HSoX1 HSoX2 HSoY1 HSoY2 X1 X2 Y1 Y2)
  (setq Check T)
  (while Check
    (if (setq Line2 (entget (car (entsel "\nChoose near line : "))))
      (if (eq (dxf 0 Line2) "LINE")
	(setq Check nil)
	(princ "\nLine must be chosen.")
      );if
    );if
  );while
  (setq Check T)
  (while Check
    (if (setq Line1 (entget (car (entsel "\nChoose far line : "))))
      (if (eq (dxf 0 Line1) "LINE")
	(setq Check nil)
	(princ "\nLine must be chosen.")
      );if
    );if
  );while
  (setq Pt11 (dxf 10 Line1)
	Pt12 (dxf 11 Line1)
	Pt21 (dxf 10 Line2)
	Pt22 (dxf 11 Line2)
  )
  (if #NumLine
    (setq NumLine (getint (strcat "\nSpecify quantity of shadow-line <" (rtos #NumLine 2) "> : ")))
    (setq NumLine (getint "\nSpecify quantity of shadow-line : "))
  )
  (if NumLine (setq #NumLine NumLine))
  (if (null #HsoKC) (setq #HsoKC 1.5))
  (if (setq HsoKC (getreal (strcat "\nSpecify factor of distance <" (rtos #HsoKC 2) "> : ")))
    (setq #HsoKC HsoKC)
  )
  (if (> (+ (distance Pt11 Pt21) (distance Pt12 Pt22)) (+ (distance Pt11 Pt22) (distance Pt12 Pt21)) )
    (setq Pt1 Pt21
	  Pt21 Pt22
	  Pt22 Pt1
    )
  );if
  (setq HSoX1 1
	Tong 1
  )
  (repeat #NumLine
    (setq HSoX1 (* HSoX1 #HsoKC)
	  Tong (+ Tong HSoX1)
    )
  );repeat
  (setq HSoX1 (/ (- (car  Pt21) (car  Pt11)) Tong)
	HSoX2 (/ (- (car  Pt22) (car  Pt12)) Tong)
	HSoY1 (/ (- (cadr Pt21) (cadr Pt11)) Tong)
	HSoY2 (/ (- (cadr Pt22) (cadr Pt12)) Tong)
	X1 (+ (car  Pt11) HSoX1)
	Y1 (+ (cadr Pt11) HSoY1)
	X2 (+ (car  Pt12) HSoX2)
	Y2 (+ (cadr Pt12) HSoY2)
  )
  (command "_undo" "end" "_undo" "begin")
  (if (null (tblsearch "layer" "5")) (command "LAYER" "N" "5" "C" "5" "5" ""))
  (repeat #NumLine
    (setq Pt1 (list X1 Y1)
	  Pt2 (list X2 Y2)
    )
;    (command "_line" Pt1 Pt2 "")
    (entmake (list '(0 . "LINE") '(8 . "5") (cons 10 Pt1) (cons 11 Pt2)))
;    (getstring "\nPress a key ...")
    (setq HsoX1 (* HsoX1 #HsoKC)
	  HsoX2 (* HsoX2 #HsoKC)
	  HsoY1 (* HsoY1 #HsoKC)
	  HsoY2 (* HsoY2 #HsoKC)
	  X1 (+ X1 HSoX1)
	  Y1 (+ Y1 HSoY1)
	  X2 (+ X2 HSoX2)
	  Y2 (+ Y2 HSoY2)
    )
  );repeat
  (command "_undo" "end")
  (princ)
);defun c:SHA



;------------------------------------------------------------------
(prompt "\n   CM  : Copy entities along one direction with same distance")
(defun c:CM (/ oldmode dt p1 p2 sl index kc goc)
  (setq dt (ssget)
	p1 (getpoint "\nFrom : ")
	p2 (getpoint p1 "\nTo : ")
  )

  (if #NumCM
    (setq sl (getint (strcat "\nQuantity <" (rtos #NumCM)  "> : ")))
    (while (not sl)
      (setq sl (getint "\nQuantity : "))
    )
  );if
  (if sl (setq #NumCM sl))
  (setq goc (angle p1 p2)
	kc (distance p1 p2)
	index 0
  )
  (command "_undo" "e" "_undo" "be")
  (setq oldmode (getvar "osmode"))
  (setvar "osmode" 0)
  (repeat #NumCM
    (setq index (1+ index))
    (command ".copy" dt "" p1 (polar p1 goc (* kc index)))
  )
  (setvar "osmode" oldmode)
  (command "_undo" "e")
  (princ)
);defun c:CM


;------------------------------------------------------------------
(prompt "\n   CMM : Copy entities along one direction with quantity")
(defun c:CMM (/ oldmode dt p1 p2 sl index kc goc)
  (setq dt (ssget)
	p1 (getpoint "\nFrom : ")
	p2 (getpoint p1 "\nTo : ")
  )

  (if #NumCM
    (setq sl (getint (strcat "\nQuantity <" (rtos #NumCM)  "> : ")))
    (while (not sl)
      (setq sl (getint "\nQuantity : "))
    )
  );if
  (if sl (setq #NumCM sl))
  (setq goc (angle p1 p2)
	kc (/ (distance p1 p2) #NumCM)
	index 0
  )
  (command "_undo" "e" "_undo" "be")
  (setq oldmode (getvar "osmode"))
  (setvar "osmode" 0)
  (repeat #NumCM
    (setq index (1+ index))
    (command ".copy" dt "" p1 (polar p1 goc (* kc index)))
  )
  (setvar "osmode" oldmode)
  (command "_undo" "e")
  (princ)
);defun c:CMM



;------------------------------------------------------------------
(defun c:PPo( / p1 p2 goc kc)
  (setq p1 (getpoint "\nSpecify first point of direction : ")
	p2 (getpoint p1 "\nSpecify second point : ")
	goc (angle p1 p2)
	kc (distance p1 p2)
  )
  (command "_pan" p1 (polar p1 goc kc))
  (princ)
);defun c:PPo


;------------------------------------------------------------------
(prompt "\n   SS  : Calculate the sum of area of objects")
(defun c:SS( / ChonArea ssl nsset temp ed); DT DienTich)
  (prompt "\nChoose objects to calculate area : ")
  (setq ChonArea (ssget))
  (setq ssl (sslength ChonArea)
	nsset (ssadd)
  )
  (while (> ssl 0)
    (progn
      (setq temp (ssname ChonArea (setq ssl (1- ssl))))
      (setq ed (entget temp))
      	(if (= (DXF 0 ed) "POLYLINE")   (ssadd temp nsset))
      	(if (= (DXF 0 ed) "LWPOLYLINE") (ssadd temp nsset))
        (if (= (DXF 0 ed) "REGION")     (ssadd temp nsset))
        (if (= (DXF 0 ed) "CIRCLE")     (ssadd temp nsset))
    )
  )
  (setq ssl (sslength nsset)
	DienTich 0
  )
  (while (> ssl 0)
    (progn
      (setq temp (ssname ChonArea (setq ssl (1- ssl))))
      (command "area" "o" temp)
      (setq DT (getvar "area"))
      (setq DienTich (+ DienTich DT))
    )
  )
  (princ (strcat "\nSum = " (rtos DienTich)))
  (setq pt (getpoint "\nSpecify a point to print result : "))
  (command "text" "style" "3" "j" "mc" pt "0" (rtos DienTich))
  (princ)
);defun c:SS




;----------------------------------------------------------
(prompt "\n   CDT : Update a text with elevation of a point")
(defun c:CDT ( / DZ pt y ptside ang OT)
     (if (= scale nil)  (setq scale (getreal "\nInput current scale: ")))
     (if (setq #Bacc (getint (strcat"\nInput accuracy <" (getvar "LUPREC") "> : ")))
       (setvar "LUPREC" #Bacc)
     )
     
     (setq pt (getpoint "\nSpecify a point to determine elevation : "))
     (setq y (/ (cadr pt) 100.0))
     (cond
          ((> y 0) (setq y (rtos y 2 #Bacc)))
          ((< y 0) (setq y (rtos y 2 #Bacc)))
          ((= y 0) (setq y "%%p0.00"))
     )
      (setq #sset (entsel "\nChoose a text : "))
      (setq ed (entget (car #sset)))
      (setq old (assoc 1 ed))
      (setq new (cons 1 y))
      (setq ed (subst new old ed))
      (entmod ed)  
      (princ)
);defun c:CDT



;------------------------------------------------------------------
(prompt "\n   CMVP: Copy viewports")
(defun c:CMVP (/ sset ssl Direction Dist_View Dist_VP Num temp ed i X_pt1 X_pt2 Y_pt1 Y_pt2
	      Cen_View VS_View Cen_VP H_VP B_VP Layer_VP Pt1_VP Pt2_VP Old_Clayer Old_Osmode Old_RM)
  (if (eq (getvar "TILEMODE") 1) (setvar "TILEMODE" 0))
  (setq Old_Clayer (getvar "CLAYER")
	Old_Osmode (getvar "OSMODE")
	Old_RM     (getvar "REGENMODE")
  )
  
  (command "_pspace")
  (setq sset (ssget '((0 . "VIEWPORT")))
	ssl  (sslength sset)
  )
  (initget "v V h H")
  (setq Direction (strcase (getkword "\nDirection (Vertical/Horizontal) : ")))
  (initget (+ 1 2))
  (setq Dist_View (getdist "\nDistance between consecutive views : "))
  (initget (+ 1 2))
  (setq Dist_VP (getdist "\nDistance between consecutive viewports : "))
  (initget (+ 1 2 4))
  (setq Num  (getint  "\nNumber of copy : "))
  (command "_undo" "e" "_undo" "be")
  (setvar "REGENMODE" 1)
  (setvar "UCSFOLLOW" 0)
  (setvar "OSMODE" 0)
  (while (> ssl 0)
    (progn
      (setq temp (ssname sset (setq ssl (1- ssl)))
	    ed  (entget temp)
	    i 1
      )
      (setq Cen_View (dxf 12 ed)
	    VS_View  (dxf 45 ed)
	    Cen_VP   (dxf 10 ed)
	    B_VP     (dxf 40 ed)
	    H_VP     (dxf 41 ed)
	    Layer_VP (dxf  8 ed)
      )
      (setvar "CLAYER" Layer_VP)
      (setq Pt1_VP (list (- (car Cen_VP) (/ B_VP 2)) (- (cadr Cen_VP) (/ H_VP 2)) )
	    Pt2_VP (list (+ (car Cen_VP) (/ B_VP 2)) (+ (cadr Cen_VP) (/ H_VP 2)) )
      )
      (if (eq Direction "H")
	(if (> Dist_VP 0)
	  (setq pt1 (list (- (car Cen_VP) (/ B_VP 2)) (- (cadr Cen_VP) (/ H_VP 2)) )
		pt2 (list (+ (car Cen_VP) (/ B_VP 2) (* Dist_VP Num)) (+ (cadr Cen_VP) (/ H_VP 2)) )
	  )
	  (setq pt1 (list (+ (car Cen_VP) (/ B_VP 2)) (- (cadr Cen_VP) (/ H_VP 2)) )
		pt2 (list (+ (- (car Cen_VP) (/ B_VP 2)) (* Dist_VP Num)) (+ (cadr Cen_VP) (/ H_VP 2)) )
	  )
	)
      )
      (if (eq Direction "V")
	(if (> Dist_VP 0)
	  (setq pt1 (list (- (car Cen_VP) (/ B_VP 2)) (- (cadr Cen_VP) (/ H_VP 2)) )
		pt2 (list (+ (car Cen_VP) (/ B_VP 2)) (+ (cadr Cen_VP) (/ H_VP 2) (* Dist_VP Num)) )
	  )
	  (setq pt1 (list (- (car Cen_VP) (/ B_VP 2)) (+ (cadr Cen_VP) (/ H_VP 2)) )
		pt2 (list (+ (car Cen_VP) (/ B_VP 2)) (+ (- (cadr Cen_VP) (/ H_VP 2)) (* Dist_VP Num)) )
	  )
	)
      )
      (command "_zoom" pt1 pt2)
      (while (<= i Num)
	(if (eq Direction "H")
	  (progn
	    (setq Pt1_VP   (list (+ (car Pt1_VP) Dist_VP) (cadr Pt1_VP) )
		  Pt2_VP   (list (+ (car Pt2_VP) Dist_VP) (cadr Pt2_VP) )
		  Cen_View (list (+ (car Cen_View) Dist_View) (cadr Cen_View) )
	    )
	  )
	  (progn
	    (setq Pt1_VP   (list (car Pt1_VP) (+ (cadr Pt1_VP) Dist_VP) )
		  Pt2_VP   (list (car Pt2_VP) (+ (cadr Pt2_VP) Dist_VP) )
		  Cen_View (list (car Cen_View) (+ (cadr Cen_View) Dist_View) )
	    )
	  )
	)
	(command "_mview" Pt1_VP Pt2_VP)
	(command "_mspace" "_zoom" "c" (trans Cen_View 2 1) VS_View "_pspace")
	(setq i (1+ i))
      );while
    )
  );while
  
  (setvar "CLAYER" Old_Clayer)
  (setvar "OSMODE" Old_osmode)
  (setvar "REGENMODE" Old_RM)
  (command "_undo" "e")
  (princ)
);defun c:CMVP
